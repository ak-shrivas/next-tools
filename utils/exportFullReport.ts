import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import html2canvas from "html2canvas";

export async function exportFullEMIReport({
  chartRefs,
  summary,
  amortizationData,
  fileName = `EMI_Report_${new Date().toISOString().slice(0,10)}.pdf`,
}: {
    chartRefs: React.RefObject<HTMLDivElement | null>[];
    summary: {
      loanAmount: number;
      emi: number;
      totalInterestWithPrepay: number;
      totalInterestWithoutPrepay: number;
      interestSaved: number;
      monthsSaved: number;
      processingFeeAmount: number;
      downPayment: number;
    };
    amortizationData: {
      calendarMonth: string;
      calendarYear: number;
      opening: number;
      principal: number;
      interest: number;
      payment: number;
      balance: number;
      totalInterestPaid: number;
    }[];
    fileName?: string;
}) {
  const doc = new jsPDF("p", "mm", "a4");

  // 1. Header
  doc.setFontSize(16);
  doc.text("EMI Report Summary", 14, 20);
  doc.setFontSize(11);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 28);

  // 2. EMI Summary Table
  autoTable(doc, {
    startY: 32,
    head: [["Label", "Value"]],
    body: [
      ["Loan Amount (after Down Payment)", `Rs. ${summary.loanAmount.toLocaleString("en-IN")}`],
      ["Down Payment", `Rs ${summary.downPayment.toLocaleString("en-IN")}`],
      ["Processing Fee", `Rs ${summary.processingFeeAmount.toLocaleString("en-IN")}`],
      ["Monthly EMI", `Rs ${summary.emi.toLocaleString("en-IN")}`],
      ["Total Interest (with prepayment)", `Rs ${summary.totalInterestWithPrepay.toLocaleString("en-IN")}`],
      ["Total Interest (without prepayment)", `Rs ${summary.totalInterestWithoutPrepay.toLocaleString("en-IN")}`],
      ["Interest Saved", `Rs ${summary.interestSaved.toLocaleString("en-IN")}`],
      ["Months Saved", `${summary.monthsSaved} months`],
    ],
    theme: "striped",
    styles: { fontSize: 10 },
  });

  let currentY = doc.lastAutoTable.finalY + 10;

  // 3. Insert Charts as Images
  for (let i = 0; i < chartRefs.length; i++) {
    const ref = chartRefs[i];
    if (ref.current) {
      const canvas = await html2canvas(ref.current);
      const imgData = canvas.toDataURL("image/png");
      const imgProps = doc.getImageProperties(imgData);
      const pdfWidth = 180;
      const imgHeight = (imgProps.height * pdfWidth) / imgProps.width;

      if (currentY + imgHeight > 280) {
        doc.addPage();
        currentY = 20;
      }

      doc.addImage(imgData, "PNG", 14, currentY, pdfWidth, imgHeight);
      currentY += imgHeight + 10;
    }
  }

  // 4. Amortization Table
  const tableData = amortizationData.map((row) => [
    `${row.calendarMonth} ${row.calendarYear}`,
    Math.round(row.payment).toLocaleString("en-IN"),
    Math.round(row.interest).toLocaleString("en-IN"),
    Math.round(row.principal).toLocaleString("en-IN"),
    Math.round(row.balance).toLocaleString("en-IN"),
    Math.round(row.totalInterestPaid).toLocaleString("en-IN"),
  ]);

  autoTable(doc, {
    head: [["Month", "Payment", "Interest", "Principal", "Balance Left", "Total Interest"]],
    body: tableData,
    startY: currentY,
    styles: { fontSize: 8 },
    theme: "grid",
  });

  // 5. Branding
  doc.setFontSize(10);
  doc.text("Generated by EMIPro.in - Smart Financial Tools", 14, 290);

  doc.save(fileName);
}
